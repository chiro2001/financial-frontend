[package]
name = "financial_analysis"
version = "0.1.0"
authors = ["Chiro <Chiro2001@163.com>"]
edition = "2021"
rust-version = "1.65"


[dependencies]
egui = "0.21.0"
eframe = { version = "0.21.0", default-features = false, features = [
    # "accesskit",     # Make egui comptaible with screen readers. NOTE: adds a lot of dependencies.
    "default_fonts", # Embed the default egui fonts.
    "glow", # Use the glow rendering backend. Alternative: "wgpu".
    "persistence", # Enable restoring app state when restarting the app.
] }

# You only need serde if you want app persistence:
serde = { version = "1", features = ["derive"] }
jsonwebtoken = "8.2.0"
rust-i18n = "1.1.1"
once_cell = "1.17.0"

rpc = { path = "rpc", features = ["client"] }
async_io_stream = { version = "0.3.3", features = ["tokio_io"] }
tokio-util = { version = "0.7.4", default-features = false, features = ["codec"] }
tokio-serde = "0.8.0"
anyhow = "1.0.69"
tracing = "0.1.37"

# native:
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
tracing-subscriber = "0.3"
#tracing = "0.1.37"
tarpc = { path = "tarpc/tarpc", features = [
    "client", "serde-transport", "serde-transport-json",
    "tcp"
], default-features = false }
tokio = { version = "1.25.0", features = ["macros", "net", "rt-multi-thread"] }

# web:
[target.'cfg(target_arch = "wasm32")'.dependencies]
console_error_panic_hook = "0.1.6"
tracing-wasm = "0.2"
tarpc = { path = "tarpc/tarpc", features = ["client", "serde-transport", "serde-transport-json"], default-features = false }

# For gRPC Client use
wasm-bindgen = "0.2.83"
wasm-bindgen-futures = "0.4.33"
#console_log = "0.2.0"
ws_stream_wasm = "0.7.3"
web-sys = "0.3.60"

[workspace]
resolver = "2"
members = [
    "tarpc/tarpc",
    "tarpc/plugins",
    #    "server",
    #    "client",
    "rpc"
]
exclude = ["./tarpc"]

[profile.release]
opt-level = 2 # fast and small wasm

# Optimize all dependencies even in debug builds:
[profile.dev.package."*"]
opt-level = 2


[patch.crates-io]

# If you want to use the bleeding edge version of egui and eframe:
# egui = { git = "https://github.com/emilk/egui", branch = "master" }
# eframe = { git = "https://github.com/emilk/egui", branch = "master" }

# If you fork https://github.com/emilk/egui you can test with:
# egui = { path = "../egui/crates/egui" }
# eframe = { path = "../egui/crates/eframe" }
